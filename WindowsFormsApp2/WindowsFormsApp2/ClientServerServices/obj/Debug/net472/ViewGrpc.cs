// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/View.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace View {
  public static partial class ViewService
  {
    static readonly string __ServiceName = "view.ViewService";

    static readonly grpc::Marshaller<global::View.VRequest> __Marshaller_view_VRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::View.VRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::View.VResponse> __Marshaller_view_VResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::View.VResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::View.HRequest> __Marshaller_view_HRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::View.HRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::View.HResponse> __Marshaller_view_HResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::View.HResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Authenticity.Token> __Marshaller_authenticity_Token = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Authenticity.Token.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::View.RVResponse> __Marshaller_view_RVResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::View.RVResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::View.VRequest, global::View.VResponse> __Method_ViewEvent = new grpc::Method<global::View.VRequest, global::View.VResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ViewEvent",
        __Marshaller_view_VRequest,
        __Marshaller_view_VResponse);

    static readonly grpc::Method<global::View.HRequest, global::View.HResponse> __Method_ShowHint = new grpc::Method<global::View.HRequest, global::View.HResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ShowHint",
        __Marshaller_view_HRequest,
        __Marshaller_view_HResponse);

    static readonly grpc::Method<global::Authenticity.Token, global::View.RVResponse> __Method_GetRegisteredView = new grpc::Method<global::Authenticity.Token, global::View.RVResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRegisteredView",
        __Marshaller_authenticity_Token,
        __Marshaller_view_RVResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::View.ViewReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ViewService</summary>
    [grpc::BindServiceMethod(typeof(ViewService), "BindService")]
    public abstract partial class ViewServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::View.VResponse> ViewEvent(global::View.VRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::View.HResponse> ShowHint(global::View.HRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::View.RVResponse> GetRegisteredView(global::Authenticity.Token request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ViewService</summary>
    public partial class ViewServiceClient : grpc::ClientBase<ViewServiceClient>
    {
      /// <summary>Creates a new client for ViewService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ViewServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ViewService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ViewServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ViewServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ViewServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::View.VResponse ViewEvent(global::View.VRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ViewEvent(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::View.VResponse ViewEvent(global::View.VRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ViewEvent, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::View.VResponse> ViewEventAsync(global::View.VRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ViewEventAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::View.VResponse> ViewEventAsync(global::View.VRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ViewEvent, null, options, request);
      }
      public virtual global::View.HResponse ShowHint(global::View.HRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ShowHint(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::View.HResponse ShowHint(global::View.HRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ShowHint, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::View.HResponse> ShowHintAsync(global::View.HRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ShowHintAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::View.HResponse> ShowHintAsync(global::View.HRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ShowHint, null, options, request);
      }
      public virtual global::View.RVResponse GetRegisteredView(global::Authenticity.Token request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRegisteredView(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::View.RVResponse GetRegisteredView(global::Authenticity.Token request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRegisteredView, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::View.RVResponse> GetRegisteredViewAsync(global::Authenticity.Token request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRegisteredViewAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::View.RVResponse> GetRegisteredViewAsync(global::Authenticity.Token request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRegisteredView, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ViewServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ViewServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ViewServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ViewEvent, serviceImpl.ViewEvent)
          .AddMethod(__Method_ShowHint, serviceImpl.ShowHint)
          .AddMethod(__Method_GetRegisteredView, serviceImpl.GetRegisteredView).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ViewServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ViewEvent, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::View.VRequest, global::View.VResponse>(serviceImpl.ViewEvent));
      serviceBinder.AddMethod(__Method_ShowHint, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::View.HRequest, global::View.HResponse>(serviceImpl.ShowHint));
      serviceBinder.AddMethod(__Method_GetRegisteredView, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Authenticity.Token, global::View.RVResponse>(serviceImpl.GetRegisteredView));
    }

  }
}
#endregion
