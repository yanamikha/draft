// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/View.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace View {

  /// <summary>Holder for reflection information generated from Protos/View.proto</summary>
  public static partial class ViewReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/View.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ViewReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFQcm90b3MvVmlldy5wcm90bxIEdmlldxoSUHJvdG9zL1Rva2VuLnByb3Rv",
            "ItcCCgVWQ2VsbBIQCgZEQk5VTEwYASABKAlIABIVCgtEb3VibGVWYWx1ZRgC",
            "IAEoAUgAEhQKCkZsb2F0VmFsdWUYAyABKAJIABIUCgpJbnQzMlZhbHVlGAQg",
            "ASgFSAASFAoKSW50NjRWYWx1ZRgFIAEoA0gAEhUKC1VpbnQzMlZhbHVlGAYg",
            "ASgNSAASFQoLVWludDY0VmFsdWUYByABKARIABITCglCb29sVmFsdWUYCCAB",
            "KAhIABIVCgtTdHJpbmdWYWx1ZRgJIAEoCUgAEhQKCkJ5dGVzVmFsdWUYCiAB",
            "KAxIABITCglVVUlEVmFsdWUYCyABKAlIABITCglIaW50VmFsdWUYDCABKAlI",
            "ABIXCg1BcnJheU9mU3RyaW5nGA0gASgJSAASJwoNRGF0ZVRpbWVWYWx1ZRgO",
            "IAEoCzIOLnZpZXcuRGF0ZVRpbWVIAEIHCgV2YWx1ZSKVAQoLVkNvbHVtbklu",
            "Zm8SDAoETmFtZRgBIAEoCRITCgtEaXNwbGF5TmFtZRgCIAEoCRIiCglWYWx1",
            "ZVR5cGUYAyABKA4yDy52aWV3LlZhbHVlVHlwZRIfCghIQ29sdW1ucxgEIAEo",
            "CzINLnZpZXcuSENvbHVtbhIOCgZJc1NjYW4YBSABKAgSDgoGVW5pcXVlGAYg",
            "ASgIIiIKBFZSb3cSGgoFQ2VsbHMYASADKAsyCy52aWV3LlZDZWxsIkUKBVZH",
            "cmlkEiIKB0NvbHVtbnMYASADKAsyES52aWV3LlZDb2x1bW5JbmZvEhgKBFJv",
            "d3MYAiADKAsyCi52aWV3LlZSb3civAEKBlZRdWVyeRIiCglTdGF0ZW1lbnQY",
            "ASABKA4yDy52aWV3LlN0YXRlbWVudBITCgtDb2x1bW5OYW1lcxgCIAMoCRIY",
            "CgRUeXBlGAMgASgOMgoudmlldy5UeXBlEiQKCkNvbmRpdGlvbnMYBCADKAsy",
            "EC52aWV3LlZDb25kaXRpb24SKQoNVW5pdE9wZXJhdG9ycxgFIAMoDjISLnZp",
            "ZXcuVW5pdE9wZXJhdG9yEg4KBk9mZnNldBgGIAEoBSJfCgpWQ29uZGl0aW9u",
            "EhIKCkNvbHVtbk5hbWUYASABKAkSIQoJT3BlcmF0b3JzGAIgASgOMg4udmll",
            "dy5PcGVyYXRvchIaCgVWYWx1ZRgDIAEoCzILLnZpZXcuVkNlbGwiWgoIVlJl",
            "cXVlc3QSDQoFVk5hbWUYASABKAkSGwoFUXVlcnkYAiABKAsyDC52aWV3LlZR",
            "dWVyeRIiCgVUb2tlbhgDIAEoCzITLmF1dGhlbnRpY2l0eS5Ub2tlbiI1CglW",
            "UmVzcG9uc2USDQoFVk5hbWUYASABKAkSGQoER3JpZBgCIAEoCzILLnZpZXcu",
            "VkdyaWQiXAoHSENvbHVtbhINCgVWTmFtZRgBIAEoCRISCgpDb2x1bW5OYW1l",
            "GAIgASgJEhoKBVZhbHVlGAMgASgLMgsudmlldy5WQ2VsbBISCgpNYWluQ29s",
            "dW1uGAQgASgJIk8KCEhSZXF1ZXN0EiIKBVRva2VuGAEgASgLMhMuYXV0aGVu",
            "dGljaXR5LlRva2VuEh8KCEhDb2x1bW5zGAIgASgLMg0udmlldy5IQ29sdW1u",
            "IjwKBEhpbnQSGAoDS2V5GAEgASgLMgsudmlldy5WQ2VsbBIaCgVWYWx1ZRgC",
            "IAEoCzILLnZpZXcuVkNlbGwiJgoJSFJlc3BvbnNlEhkKBUhpbnRzGAEgAygL",
            "Mgoudmlldy5IaW50IjQKDlJlZ2lzdGVyZWRWaWV3Eg0KBVZOYW1lGAEgASgJ",
            "EhMKC0Rpc3BsYXlOYW1lGAIgASgJIjsKClJWUmVzcG9uc2USLQoPUmVnaXN0",
            "ZXJlZFZpZXdzGAEgAygLMhQudmlldy5SZWdpc3RlcmVkVmlldyIZCghEYXRl",
            "VGltZRINCgVWYWx1ZRgBIAEoAyrxAQoJVmFsdWVUeXBlEg0KCU5vbmVWYWx1",
            "ZRAAEg8KC0RvdWJsZVZhbHVlEAESDgoKRmxvYXRWYWx1ZRACEg4KCkludDMy",
            "VmFsdWUQAxIOCgpJbnQ2NFZhbHVlEAQSDwoLVWludDMyVmFsdWUQBRIPCgtV",
            "aW50NjRWYWx1ZRAGEg0KCUJvb2xWYWx1ZRAHEg8KC1N0cmluZ1ZhbHVlEAgS",
            "DgoKQnl0ZXNWYWx1ZRAJEg0KCVVVSURWYWx1ZRAKEg0KCUhpbnRWYWx1ZRAL",
            "EhEKDUFycmF5T2ZTdHJpbmcQDBIRCg1EYXRlVGltZVZhbHVlEA0qTgoJU3Rh",
            "dGVtZW50EhEKDU5vbmVTdGF0ZW1lbnQQABIKCgZTZWxlY3QQARIKCgZJbnNl",
            "cnQQAhIKCgZVcGRhdGUQAxIKCgZEZWxldGUQBCqAAQoIT3BlcmF0b3ISEAoM",
            "Tm9uZU9wZXJhdG9yEAASCAoETW9yZRABEg0KCU1vcmVFcXVhbBACEggKBExl",
            "c3MQAxINCglMZXNzRXF1YWwQBBILCgdFcXVhbGx5EAUSDAoITm90RXF1YWwQ",
            "BhIICgRMaWtlEAcSCwoHQmV0d2VlbhAIKjUKDFVuaXRPcGVyYXRvchIUChBO",
            "b25lVW5pdE9wZXJhdG9yEAASBwoDQW5kEAESBgoCT3IQAioaCgRUeXBlEgcK",
            "A0FsbBAAEgkKBVF1ZXJ5EAEypAEKC1ZpZXdTZXJ2aWNlEiwKCVZpZXdFdmVu",
            "dBIOLnZpZXcuVlJlcXVlc3QaDy52aWV3LlZSZXNwb25zZRIrCghTaG93SGlu",
            "dBIOLnZpZXcuSFJlcXVlc3QaDy52aWV3LkhSZXNwb25zZRI6ChFHZXRSZWdp",
            "c3RlcmVkVmlldxITLmF1dGhlbnRpY2l0eS5Ub2tlbhoQLnZpZXcuUlZSZXNw",
            "b25zZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Authenticity.TokenReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::View.ValueType), typeof(global::View.Statement), typeof(global::View.Operator), typeof(global::View.UnitOperator), typeof(global::View.Type), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::View.VCell), global::View.VCell.Parser, new[]{ "DBNULL", "DoubleValue", "FloatValue", "Int32Value", "Int64Value", "Uint32Value", "Uint64Value", "BoolValue", "StringValue", "BytesValue", "UUIDValue", "HintValue", "ArrayOfString", "DateTimeValue" }, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::View.VColumnInfo), global::View.VColumnInfo.Parser, new[]{ "Name", "DisplayName", "ValueType", "HColumns", "IsScan", "Unique" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::View.VRow), global::View.VRow.Parser, new[]{ "Cells" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::View.VGrid), global::View.VGrid.Parser, new[]{ "Columns", "Rows" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::View.VQuery), global::View.VQuery.Parser, new[]{ "Statement", "ColumnNames", "Type", "Conditions", "UnitOperators", "Offset" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::View.VCondition), global::View.VCondition.Parser, new[]{ "ColumnName", "Operators", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::View.VRequest), global::View.VRequest.Parser, new[]{ "VName", "Query", "Token" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::View.VResponse), global::View.VResponse.Parser, new[]{ "VName", "Grid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::View.HColumn), global::View.HColumn.Parser, new[]{ "VName", "ColumnName", "Value", "MainColumn" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::View.HRequest), global::View.HRequest.Parser, new[]{ "Token", "HColumns" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::View.Hint), global::View.Hint.Parser, new[]{ "Key", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::View.HResponse), global::View.HResponse.Parser, new[]{ "Hints" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::View.RegisteredView), global::View.RegisteredView.Parser, new[]{ "VName", "DisplayName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::View.RVResponse), global::View.RVResponse.Parser, new[]{ "RegisteredViews" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::View.DateTime), global::View.DateTime.Parser, new[]{ "Value" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ValueType {
    [pbr::OriginalName("NoneValue")] NoneValue = 0,
    [pbr::OriginalName("DoubleValue")] DoubleValue = 1,
    [pbr::OriginalName("FloatValue")] FloatValue = 2,
    [pbr::OriginalName("Int32Value")] Int32Value = 3,
    [pbr::OriginalName("Int64Value")] Int64Value = 4,
    [pbr::OriginalName("Uint32Value")] Uint32Value = 5,
    [pbr::OriginalName("Uint64Value")] Uint64Value = 6,
    [pbr::OriginalName("BoolValue")] BoolValue = 7,
    [pbr::OriginalName("StringValue")] StringValue = 8,
    [pbr::OriginalName("BytesValue")] BytesValue = 9,
    [pbr::OriginalName("UUIDValue")] Uuidvalue = 10,
    [pbr::OriginalName("HintValue")] HintValue = 11,
    [pbr::OriginalName("ArrayOfString")] ArrayOfString = 12,
    [pbr::OriginalName("DateTimeValue")] DateTimeValue = 13,
  }

  public enum Statement {
    [pbr::OriginalName("NoneStatement")] NoneStatement = 0,
    [pbr::OriginalName("Select")] Select = 1,
    [pbr::OriginalName("Insert")] Insert = 2,
    [pbr::OriginalName("Update")] Update = 3,
    [pbr::OriginalName("Delete")] Delete = 4,
  }

  public enum Operator {
    [pbr::OriginalName("NoneOperator")] NoneOperator = 0,
    [pbr::OriginalName("More")] More = 1,
    [pbr::OriginalName("MoreEqual")] MoreEqual = 2,
    [pbr::OriginalName("Less")] Less = 3,
    [pbr::OriginalName("LessEqual")] LessEqual = 4,
    [pbr::OriginalName("Equally")] Equally = 5,
    [pbr::OriginalName("NotEqual")] NotEqual = 6,
    [pbr::OriginalName("Like")] Like = 7,
    [pbr::OriginalName("Between")] Between = 8,
  }

  public enum UnitOperator {
    [pbr::OriginalName("NoneUnitOperator")] NoneUnitOperator = 0,
    [pbr::OriginalName("And")] And = 1,
    [pbr::OriginalName("Or")] Or = 2,
  }

  public enum Type {
    [pbr::OriginalName("All")] All = 0,
    [pbr::OriginalName("Query")] Query = 1,
  }

  #endregion

  #region Messages
  public sealed partial class VCell : pb::IMessage<VCell> {
    private static readonly pb::MessageParser<VCell> _parser = new pb::MessageParser<VCell>(() => new VCell());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VCell> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::View.ViewReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VCell() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VCell(VCell other) : this() {
      switch (other.ValueCase) {
        case ValueOneofCase.DBNULL:
          DBNULL = other.DBNULL;
          break;
        case ValueOneofCase.DoubleValue:
          DoubleValue = other.DoubleValue;
          break;
        case ValueOneofCase.FloatValue:
          FloatValue = other.FloatValue;
          break;
        case ValueOneofCase.Int32Value:
          Int32Value = other.Int32Value;
          break;
        case ValueOneofCase.Int64Value:
          Int64Value = other.Int64Value;
          break;
        case ValueOneofCase.Uint32Value:
          Uint32Value = other.Uint32Value;
          break;
        case ValueOneofCase.Uint64Value:
          Uint64Value = other.Uint64Value;
          break;
        case ValueOneofCase.BoolValue:
          BoolValue = other.BoolValue;
          break;
        case ValueOneofCase.StringValue:
          StringValue = other.StringValue;
          break;
        case ValueOneofCase.BytesValue:
          BytesValue = other.BytesValue;
          break;
        case ValueOneofCase.UUIDValue:
          UUIDValue = other.UUIDValue;
          break;
        case ValueOneofCase.HintValue:
          HintValue = other.HintValue;
          break;
        case ValueOneofCase.ArrayOfString:
          ArrayOfString = other.ArrayOfString;
          break;
        case ValueOneofCase.DateTimeValue:
          DateTimeValue = other.DateTimeValue.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VCell Clone() {
      return new VCell(this);
    }

    /// <summary>Field number for the "DBNULL" field.</summary>
    public const int DBNULLFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DBNULL {
      get { return valueCase_ == ValueOneofCase.DBNULL ? (string) value_ : ""; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueCase_ = ValueOneofCase.DBNULL;
      }
    }

    /// <summary>Field number for the "DoubleValue" field.</summary>
    public const int DoubleValueFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DoubleValue {
      get { return valueCase_ == ValueOneofCase.DoubleValue ? (double) value_ : 0D; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.DoubleValue;
      }
    }

    /// <summary>Field number for the "FloatValue" field.</summary>
    public const int FloatValueFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FloatValue {
      get { return valueCase_ == ValueOneofCase.FloatValue ? (float) value_ : 0F; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.FloatValue;
      }
    }

    /// <summary>Field number for the "Int32Value" field.</summary>
    public const int Int32ValueFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Int32Value {
      get { return valueCase_ == ValueOneofCase.Int32Value ? (int) value_ : 0; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.Int32Value;
      }
    }

    /// <summary>Field number for the "Int64Value" field.</summary>
    public const int Int64ValueFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Int64Value {
      get { return valueCase_ == ValueOneofCase.Int64Value ? (long) value_ : 0L; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.Int64Value;
      }
    }

    /// <summary>Field number for the "Uint32Value" field.</summary>
    public const int Uint32ValueFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uint32Value {
      get { return valueCase_ == ValueOneofCase.Uint32Value ? (uint) value_ : 0; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.Uint32Value;
      }
    }

    /// <summary>Field number for the "Uint64Value" field.</summary>
    public const int Uint64ValueFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uint64Value {
      get { return valueCase_ == ValueOneofCase.Uint64Value ? (ulong) value_ : 0UL; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.Uint64Value;
      }
    }

    /// <summary>Field number for the "BoolValue" field.</summary>
    public const int BoolValueFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BoolValue {
      get { return valueCase_ == ValueOneofCase.BoolValue ? (bool) value_ : false; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.BoolValue;
      }
    }

    /// <summary>Field number for the "StringValue" field.</summary>
    public const int StringValueFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringValue {
      get { return valueCase_ == ValueOneofCase.StringValue ? (string) value_ : ""; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueCase_ = ValueOneofCase.StringValue;
      }
    }

    /// <summary>Field number for the "BytesValue" field.</summary>
    public const int BytesValueFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BytesValue {
      get { return valueCase_ == ValueOneofCase.BytesValue ? (pb::ByteString) value_ : pb::ByteString.Empty; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueCase_ = ValueOneofCase.BytesValue;
      }
    }

    /// <summary>Field number for the "UUIDValue" field.</summary>
    public const int UUIDValueFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UUIDValue {
      get { return valueCase_ == ValueOneofCase.UUIDValue ? (string) value_ : ""; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueCase_ = ValueOneofCase.UUIDValue;
      }
    }

    /// <summary>Field number for the "HintValue" field.</summary>
    public const int HintValueFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HintValue {
      get { return valueCase_ == ValueOneofCase.HintValue ? (string) value_ : ""; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueCase_ = ValueOneofCase.HintValue;
      }
    }

    /// <summary>Field number for the "ArrayOfString" field.</summary>
    public const int ArrayOfStringFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ArrayOfString {
      get { return valueCase_ == ValueOneofCase.ArrayOfString ? (string) value_ : ""; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueCase_ = ValueOneofCase.ArrayOfString;
      }
    }

    /// <summary>Field number for the "DateTimeValue" field.</summary>
    public const int DateTimeValueFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::View.DateTime DateTimeValue {
      get { return valueCase_ == ValueOneofCase.DateTimeValue ? (global::View.DateTime) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.DateTimeValue;
      }
    }

    private object value_;
    /// <summary>Enum of possible cases for the "value" oneof.</summary>
    public enum ValueOneofCase {
      None = 0,
      DBNULL = 1,
      DoubleValue = 2,
      FloatValue = 3,
      Int32Value = 4,
      Int64Value = 5,
      Uint32Value = 6,
      Uint64Value = 7,
      BoolValue = 8,
      StringValue = 9,
      BytesValue = 10,
      UUIDValue = 11,
      HintValue = 12,
      ArrayOfString = 13,
      DateTimeValue = 14,
    }
    private ValueOneofCase valueCase_ = ValueOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueOneofCase ValueCase {
      get { return valueCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      valueCase_ = ValueOneofCase.None;
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VCell);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VCell other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DBNULL != other.DBNULL) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DoubleValue, other.DoubleValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FloatValue, other.FloatValue)) return false;
      if (Int32Value != other.Int32Value) return false;
      if (Int64Value != other.Int64Value) return false;
      if (Uint32Value != other.Uint32Value) return false;
      if (Uint64Value != other.Uint64Value) return false;
      if (BoolValue != other.BoolValue) return false;
      if (StringValue != other.StringValue) return false;
      if (BytesValue != other.BytesValue) return false;
      if (UUIDValue != other.UUIDValue) return false;
      if (HintValue != other.HintValue) return false;
      if (ArrayOfString != other.ArrayOfString) return false;
      if (!object.Equals(DateTimeValue, other.DateTimeValue)) return false;
      if (ValueCase != other.ValueCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (valueCase_ == ValueOneofCase.DBNULL) hash ^= DBNULL.GetHashCode();
      if (valueCase_ == ValueOneofCase.DoubleValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DoubleValue);
      if (valueCase_ == ValueOneofCase.FloatValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FloatValue);
      if (valueCase_ == ValueOneofCase.Int32Value) hash ^= Int32Value.GetHashCode();
      if (valueCase_ == ValueOneofCase.Int64Value) hash ^= Int64Value.GetHashCode();
      if (valueCase_ == ValueOneofCase.Uint32Value) hash ^= Uint32Value.GetHashCode();
      if (valueCase_ == ValueOneofCase.Uint64Value) hash ^= Uint64Value.GetHashCode();
      if (valueCase_ == ValueOneofCase.BoolValue) hash ^= BoolValue.GetHashCode();
      if (valueCase_ == ValueOneofCase.StringValue) hash ^= StringValue.GetHashCode();
      if (valueCase_ == ValueOneofCase.BytesValue) hash ^= BytesValue.GetHashCode();
      if (valueCase_ == ValueOneofCase.UUIDValue) hash ^= UUIDValue.GetHashCode();
      if (valueCase_ == ValueOneofCase.HintValue) hash ^= HintValue.GetHashCode();
      if (valueCase_ == ValueOneofCase.ArrayOfString) hash ^= ArrayOfString.GetHashCode();
      if (valueCase_ == ValueOneofCase.DateTimeValue) hash ^= DateTimeValue.GetHashCode();
      hash ^= (int) valueCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (valueCase_ == ValueOneofCase.DBNULL) {
        output.WriteRawTag(10);
        output.WriteString(DBNULL);
      }
      if (valueCase_ == ValueOneofCase.DoubleValue) {
        output.WriteRawTag(17);
        output.WriteDouble(DoubleValue);
      }
      if (valueCase_ == ValueOneofCase.FloatValue) {
        output.WriteRawTag(29);
        output.WriteFloat(FloatValue);
      }
      if (valueCase_ == ValueOneofCase.Int32Value) {
        output.WriteRawTag(32);
        output.WriteInt32(Int32Value);
      }
      if (valueCase_ == ValueOneofCase.Int64Value) {
        output.WriteRawTag(40);
        output.WriteInt64(Int64Value);
      }
      if (valueCase_ == ValueOneofCase.Uint32Value) {
        output.WriteRawTag(48);
        output.WriteUInt32(Uint32Value);
      }
      if (valueCase_ == ValueOneofCase.Uint64Value) {
        output.WriteRawTag(56);
        output.WriteUInt64(Uint64Value);
      }
      if (valueCase_ == ValueOneofCase.BoolValue) {
        output.WriteRawTag(64);
        output.WriteBool(BoolValue);
      }
      if (valueCase_ == ValueOneofCase.StringValue) {
        output.WriteRawTag(74);
        output.WriteString(StringValue);
      }
      if (valueCase_ == ValueOneofCase.BytesValue) {
        output.WriteRawTag(82);
        output.WriteBytes(BytesValue);
      }
      if (valueCase_ == ValueOneofCase.UUIDValue) {
        output.WriteRawTag(90);
        output.WriteString(UUIDValue);
      }
      if (valueCase_ == ValueOneofCase.HintValue) {
        output.WriteRawTag(98);
        output.WriteString(HintValue);
      }
      if (valueCase_ == ValueOneofCase.ArrayOfString) {
        output.WriteRawTag(106);
        output.WriteString(ArrayOfString);
      }
      if (valueCase_ == ValueOneofCase.DateTimeValue) {
        output.WriteRawTag(114);
        output.WriteMessage(DateTimeValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (valueCase_ == ValueOneofCase.DBNULL) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DBNULL);
      }
      if (valueCase_ == ValueOneofCase.DoubleValue) {
        size += 1 + 8;
      }
      if (valueCase_ == ValueOneofCase.FloatValue) {
        size += 1 + 4;
      }
      if (valueCase_ == ValueOneofCase.Int32Value) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Int32Value);
      }
      if (valueCase_ == ValueOneofCase.Int64Value) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Int64Value);
      }
      if (valueCase_ == ValueOneofCase.Uint32Value) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uint32Value);
      }
      if (valueCase_ == ValueOneofCase.Uint64Value) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uint64Value);
      }
      if (valueCase_ == ValueOneofCase.BoolValue) {
        size += 1 + 1;
      }
      if (valueCase_ == ValueOneofCase.StringValue) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringValue);
      }
      if (valueCase_ == ValueOneofCase.BytesValue) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BytesValue);
      }
      if (valueCase_ == ValueOneofCase.UUIDValue) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UUIDValue);
      }
      if (valueCase_ == ValueOneofCase.HintValue) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HintValue);
      }
      if (valueCase_ == ValueOneofCase.ArrayOfString) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ArrayOfString);
      }
      if (valueCase_ == ValueOneofCase.DateTimeValue) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DateTimeValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VCell other) {
      if (other == null) {
        return;
      }
      switch (other.ValueCase) {
        case ValueOneofCase.DBNULL:
          DBNULL = other.DBNULL;
          break;
        case ValueOneofCase.DoubleValue:
          DoubleValue = other.DoubleValue;
          break;
        case ValueOneofCase.FloatValue:
          FloatValue = other.FloatValue;
          break;
        case ValueOneofCase.Int32Value:
          Int32Value = other.Int32Value;
          break;
        case ValueOneofCase.Int64Value:
          Int64Value = other.Int64Value;
          break;
        case ValueOneofCase.Uint32Value:
          Uint32Value = other.Uint32Value;
          break;
        case ValueOneofCase.Uint64Value:
          Uint64Value = other.Uint64Value;
          break;
        case ValueOneofCase.BoolValue:
          BoolValue = other.BoolValue;
          break;
        case ValueOneofCase.StringValue:
          StringValue = other.StringValue;
          break;
        case ValueOneofCase.BytesValue:
          BytesValue = other.BytesValue;
          break;
        case ValueOneofCase.UUIDValue:
          UUIDValue = other.UUIDValue;
          break;
        case ValueOneofCase.HintValue:
          HintValue = other.HintValue;
          break;
        case ValueOneofCase.ArrayOfString:
          ArrayOfString = other.ArrayOfString;
          break;
        case ValueOneofCase.DateTimeValue:
          if (DateTimeValue == null) {
            DateTimeValue = new global::View.DateTime();
          }
          DateTimeValue.MergeFrom(other.DateTimeValue);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DBNULL = input.ReadString();
            break;
          }
          case 17: {
            DoubleValue = input.ReadDouble();
            break;
          }
          case 29: {
            FloatValue = input.ReadFloat();
            break;
          }
          case 32: {
            Int32Value = input.ReadInt32();
            break;
          }
          case 40: {
            Int64Value = input.ReadInt64();
            break;
          }
          case 48: {
            Uint32Value = input.ReadUInt32();
            break;
          }
          case 56: {
            Uint64Value = input.ReadUInt64();
            break;
          }
          case 64: {
            BoolValue = input.ReadBool();
            break;
          }
          case 74: {
            StringValue = input.ReadString();
            break;
          }
          case 82: {
            BytesValue = input.ReadBytes();
            break;
          }
          case 90: {
            UUIDValue = input.ReadString();
            break;
          }
          case 98: {
            HintValue = input.ReadString();
            break;
          }
          case 106: {
            ArrayOfString = input.ReadString();
            break;
          }
          case 114: {
            global::View.DateTime subBuilder = new global::View.DateTime();
            if (valueCase_ == ValueOneofCase.DateTimeValue) {
              subBuilder.MergeFrom(DateTimeValue);
            }
            input.ReadMessage(subBuilder);
            DateTimeValue = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class VColumnInfo : pb::IMessage<VColumnInfo> {
    private static readonly pb::MessageParser<VColumnInfo> _parser = new pb::MessageParser<VColumnInfo>(() => new VColumnInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VColumnInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::View.ViewReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VColumnInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VColumnInfo(VColumnInfo other) : this() {
      name_ = other.name_;
      displayName_ = other.displayName_;
      valueType_ = other.valueType_;
      hColumns_ = other.hColumns_ != null ? other.hColumns_.Clone() : null;
      isScan_ = other.isScan_;
      unique_ = other.unique_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VColumnInfo Clone() {
      return new VColumnInfo(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DisplayName" field.</summary>
    public const int DisplayNameFieldNumber = 2;
    private string displayName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ValueType" field.</summary>
    public const int ValueTypeFieldNumber = 3;
    private global::View.ValueType valueType_ = global::View.ValueType.NoneValue;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::View.ValueType ValueType {
      get { return valueType_; }
      set {
        valueType_ = value;
      }
    }

    /// <summary>Field number for the "HColumns" field.</summary>
    public const int HColumnsFieldNumber = 4;
    private global::View.HColumn hColumns_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::View.HColumn HColumns {
      get { return hColumns_; }
      set {
        hColumns_ = value;
      }
    }

    /// <summary>Field number for the "IsScan" field.</summary>
    public const int IsScanFieldNumber = 5;
    private bool isScan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsScan {
      get { return isScan_; }
      set {
        isScan_ = value;
      }
    }

    /// <summary>Field number for the "Unique" field.</summary>
    public const int UniqueFieldNumber = 6;
    private bool unique_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Unique {
      get { return unique_; }
      set {
        unique_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VColumnInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VColumnInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (DisplayName != other.DisplayName) return false;
      if (ValueType != other.ValueType) return false;
      if (!object.Equals(HColumns, other.HColumns)) return false;
      if (IsScan != other.IsScan) return false;
      if (Unique != other.Unique) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      if (ValueType != global::View.ValueType.NoneValue) hash ^= ValueType.GetHashCode();
      if (hColumns_ != null) hash ^= HColumns.GetHashCode();
      if (IsScan != false) hash ^= IsScan.GetHashCode();
      if (Unique != false) hash ^= Unique.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DisplayName);
      }
      if (ValueType != global::View.ValueType.NoneValue) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ValueType);
      }
      if (hColumns_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(HColumns);
      }
      if (IsScan != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsScan);
      }
      if (Unique != false) {
        output.WriteRawTag(48);
        output.WriteBool(Unique);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (ValueType != global::View.ValueType.NoneValue) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ValueType);
      }
      if (hColumns_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HColumns);
      }
      if (IsScan != false) {
        size += 1 + 1;
      }
      if (Unique != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VColumnInfo other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      if (other.ValueType != global::View.ValueType.NoneValue) {
        ValueType = other.ValueType;
      }
      if (other.hColumns_ != null) {
        if (hColumns_ == null) {
          HColumns = new global::View.HColumn();
        }
        HColumns.MergeFrom(other.HColumns);
      }
      if (other.IsScan != false) {
        IsScan = other.IsScan;
      }
      if (other.Unique != false) {
        Unique = other.Unique;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            DisplayName = input.ReadString();
            break;
          }
          case 24: {
            ValueType = (global::View.ValueType) input.ReadEnum();
            break;
          }
          case 34: {
            if (hColumns_ == null) {
              HColumns = new global::View.HColumn();
            }
            input.ReadMessage(HColumns);
            break;
          }
          case 40: {
            IsScan = input.ReadBool();
            break;
          }
          case 48: {
            Unique = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VRow : pb::IMessage<VRow> {
    private static readonly pb::MessageParser<VRow> _parser = new pb::MessageParser<VRow>(() => new VRow());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VRow> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::View.ViewReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VRow() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VRow(VRow other) : this() {
      cells_ = other.cells_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VRow Clone() {
      return new VRow(this);
    }

    /// <summary>Field number for the "Cells" field.</summary>
    public const int CellsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::View.VCell> _repeated_cells_codec
        = pb::FieldCodec.ForMessage(10, global::View.VCell.Parser);
    private readonly pbc::RepeatedField<global::View.VCell> cells_ = new pbc::RepeatedField<global::View.VCell>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::View.VCell> Cells {
      get { return cells_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VRow);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VRow other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cells_.Equals(other.cells_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cells_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cells_.WriteTo(output, _repeated_cells_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cells_.CalculateSize(_repeated_cells_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VRow other) {
      if (other == null) {
        return;
      }
      cells_.Add(other.cells_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            cells_.AddEntriesFrom(input, _repeated_cells_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class VGrid : pb::IMessage<VGrid> {
    private static readonly pb::MessageParser<VGrid> _parser = new pb::MessageParser<VGrid>(() => new VGrid());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VGrid> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::View.ViewReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VGrid() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VGrid(VGrid other) : this() {
      columns_ = other.columns_.Clone();
      rows_ = other.rows_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VGrid Clone() {
      return new VGrid(this);
    }

    /// <summary>Field number for the "Columns" field.</summary>
    public const int ColumnsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::View.VColumnInfo> _repeated_columns_codec
        = pb::FieldCodec.ForMessage(10, global::View.VColumnInfo.Parser);
    private readonly pbc::RepeatedField<global::View.VColumnInfo> columns_ = new pbc::RepeatedField<global::View.VColumnInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::View.VColumnInfo> Columns {
      get { return columns_; }
    }

    /// <summary>Field number for the "Rows" field.</summary>
    public const int RowsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::View.VRow> _repeated_rows_codec
        = pb::FieldCodec.ForMessage(18, global::View.VRow.Parser);
    private readonly pbc::RepeatedField<global::View.VRow> rows_ = new pbc::RepeatedField<global::View.VRow>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::View.VRow> Rows {
      get { return rows_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VGrid);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VGrid other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!columns_.Equals(other.columns_)) return false;
      if(!rows_.Equals(other.rows_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= columns_.GetHashCode();
      hash ^= rows_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      columns_.WriteTo(output, _repeated_columns_codec);
      rows_.WriteTo(output, _repeated_rows_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += columns_.CalculateSize(_repeated_columns_codec);
      size += rows_.CalculateSize(_repeated_rows_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VGrid other) {
      if (other == null) {
        return;
      }
      columns_.Add(other.columns_);
      rows_.Add(other.rows_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            columns_.AddEntriesFrom(input, _repeated_columns_codec);
            break;
          }
          case 18: {
            rows_.AddEntriesFrom(input, _repeated_rows_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class VQuery : pb::IMessage<VQuery> {
    private static readonly pb::MessageParser<VQuery> _parser = new pb::MessageParser<VQuery>(() => new VQuery());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VQuery> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::View.ViewReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VQuery() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VQuery(VQuery other) : this() {
      statement_ = other.statement_;
      columnNames_ = other.columnNames_.Clone();
      type_ = other.type_;
      conditions_ = other.conditions_.Clone();
      unitOperators_ = other.unitOperators_.Clone();
      offset_ = other.offset_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VQuery Clone() {
      return new VQuery(this);
    }

    /// <summary>Field number for the "Statement" field.</summary>
    public const int StatementFieldNumber = 1;
    private global::View.Statement statement_ = global::View.Statement.NoneStatement;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::View.Statement Statement {
      get { return statement_; }
      set {
        statement_ = value;
      }
    }

    /// <summary>Field number for the "ColumnNames" field.</summary>
    public const int ColumnNamesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_columnNames_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> columnNames_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ColumnNames {
      get { return columnNames_; }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::View.Type type_ = global::View.Type.All;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::View.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Conditions" field.</summary>
    public const int ConditionsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::View.VCondition> _repeated_conditions_codec
        = pb::FieldCodec.ForMessage(34, global::View.VCondition.Parser);
    private readonly pbc::RepeatedField<global::View.VCondition> conditions_ = new pbc::RepeatedField<global::View.VCondition>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::View.VCondition> Conditions {
      get { return conditions_; }
    }

    /// <summary>Field number for the "UnitOperators" field.</summary>
    public const int UnitOperatorsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::View.UnitOperator> _repeated_unitOperators_codec
        = pb::FieldCodec.ForEnum(42, x => (int) x, x => (global::View.UnitOperator) x);
    private readonly pbc::RepeatedField<global::View.UnitOperator> unitOperators_ = new pbc::RepeatedField<global::View.UnitOperator>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::View.UnitOperator> UnitOperators {
      get { return unitOperators_; }
    }

    /// <summary>Field number for the "Offset" field.</summary>
    public const int OffsetFieldNumber = 6;
    private int offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VQuery);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VQuery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Statement != other.Statement) return false;
      if(!columnNames_.Equals(other.columnNames_)) return false;
      if (Type != other.Type) return false;
      if(!conditions_.Equals(other.conditions_)) return false;
      if(!unitOperators_.Equals(other.unitOperators_)) return false;
      if (Offset != other.Offset) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Statement != global::View.Statement.NoneStatement) hash ^= Statement.GetHashCode();
      hash ^= columnNames_.GetHashCode();
      if (Type != global::View.Type.All) hash ^= Type.GetHashCode();
      hash ^= conditions_.GetHashCode();
      hash ^= unitOperators_.GetHashCode();
      if (Offset != 0) hash ^= Offset.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Statement != global::View.Statement.NoneStatement) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Statement);
      }
      columnNames_.WriteTo(output, _repeated_columnNames_codec);
      if (Type != global::View.Type.All) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      conditions_.WriteTo(output, _repeated_conditions_codec);
      unitOperators_.WriteTo(output, _repeated_unitOperators_codec);
      if (Offset != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Offset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Statement != global::View.Statement.NoneStatement) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Statement);
      }
      size += columnNames_.CalculateSize(_repeated_columnNames_codec);
      if (Type != global::View.Type.All) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += conditions_.CalculateSize(_repeated_conditions_codec);
      size += unitOperators_.CalculateSize(_repeated_unitOperators_codec);
      if (Offset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Offset);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VQuery other) {
      if (other == null) {
        return;
      }
      if (other.Statement != global::View.Statement.NoneStatement) {
        Statement = other.Statement;
      }
      columnNames_.Add(other.columnNames_);
      if (other.Type != global::View.Type.All) {
        Type = other.Type;
      }
      conditions_.Add(other.conditions_);
      unitOperators_.Add(other.unitOperators_);
      if (other.Offset != 0) {
        Offset = other.Offset;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Statement = (global::View.Statement) input.ReadEnum();
            break;
          }
          case 18: {
            columnNames_.AddEntriesFrom(input, _repeated_columnNames_codec);
            break;
          }
          case 24: {
            Type = (global::View.Type) input.ReadEnum();
            break;
          }
          case 34: {
            conditions_.AddEntriesFrom(input, _repeated_conditions_codec);
            break;
          }
          case 42:
          case 40: {
            unitOperators_.AddEntriesFrom(input, _repeated_unitOperators_codec);
            break;
          }
          case 48: {
            Offset = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VCondition : pb::IMessage<VCondition> {
    private static readonly pb::MessageParser<VCondition> _parser = new pb::MessageParser<VCondition>(() => new VCondition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VCondition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::View.ViewReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VCondition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VCondition(VCondition other) : this() {
      columnName_ = other.columnName_;
      operators_ = other.operators_;
      value_ = other.value_ != null ? other.value_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VCondition Clone() {
      return new VCondition(this);
    }

    /// <summary>Field number for the "ColumnName" field.</summary>
    public const int ColumnNameFieldNumber = 1;
    private string columnName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ColumnName {
      get { return columnName_; }
      set {
        columnName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Operators" field.</summary>
    public const int OperatorsFieldNumber = 2;
    private global::View.Operator operators_ = global::View.Operator.NoneOperator;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::View.Operator Operators {
      get { return operators_; }
      set {
        operators_ = value;
      }
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 3;
    private global::View.VCell value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::View.VCell Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VCondition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VCondition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ColumnName != other.ColumnName) return false;
      if (Operators != other.Operators) return false;
      if (!object.Equals(Value, other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ColumnName.Length != 0) hash ^= ColumnName.GetHashCode();
      if (Operators != global::View.Operator.NoneOperator) hash ^= Operators.GetHashCode();
      if (value_ != null) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ColumnName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ColumnName);
      }
      if (Operators != global::View.Operator.NoneOperator) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Operators);
      }
      if (value_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ColumnName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ColumnName);
      }
      if (Operators != global::View.Operator.NoneOperator) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Operators);
      }
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VCondition other) {
      if (other == null) {
        return;
      }
      if (other.ColumnName.Length != 0) {
        ColumnName = other.ColumnName;
      }
      if (other.Operators != global::View.Operator.NoneOperator) {
        Operators = other.Operators;
      }
      if (other.value_ != null) {
        if (value_ == null) {
          Value = new global::View.VCell();
        }
        Value.MergeFrom(other.Value);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ColumnName = input.ReadString();
            break;
          }
          case 16: {
            Operators = (global::View.Operator) input.ReadEnum();
            break;
          }
          case 26: {
            if (value_ == null) {
              Value = new global::View.VCell();
            }
            input.ReadMessage(Value);
            break;
          }
        }
      }
    }

  }

  public sealed partial class VRequest : pb::IMessage<VRequest> {
    private static readonly pb::MessageParser<VRequest> _parser = new pb::MessageParser<VRequest>(() => new VRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::View.ViewReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VRequest(VRequest other) : this() {
      vName_ = other.vName_;
      query_ = other.query_ != null ? other.query_.Clone() : null;
      token_ = other.token_ != null ? other.token_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VRequest Clone() {
      return new VRequest(this);
    }

    /// <summary>Field number for the "VName" field.</summary>
    public const int VNameFieldNumber = 1;
    private string vName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VName {
      get { return vName_; }
      set {
        vName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Query" field.</summary>
    public const int QueryFieldNumber = 2;
    private global::View.VQuery query_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::View.VQuery Query {
      get { return query_; }
      set {
        query_ = value;
      }
    }

    /// <summary>Field number for the "Token" field.</summary>
    public const int TokenFieldNumber = 3;
    private global::Authenticity.Token token_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authenticity.Token Token {
      get { return token_; }
      set {
        token_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VName != other.VName) return false;
      if (!object.Equals(Query, other.Query)) return false;
      if (!object.Equals(Token, other.Token)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VName.Length != 0) hash ^= VName.GetHashCode();
      if (query_ != null) hash ^= Query.GetHashCode();
      if (token_ != null) hash ^= Token.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(VName);
      }
      if (query_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Query);
      }
      if (token_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VName);
      }
      if (query_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Query);
      }
      if (token_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Token);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VRequest other) {
      if (other == null) {
        return;
      }
      if (other.VName.Length != 0) {
        VName = other.VName;
      }
      if (other.query_ != null) {
        if (query_ == null) {
          Query = new global::View.VQuery();
        }
        Query.MergeFrom(other.Query);
      }
      if (other.token_ != null) {
        if (token_ == null) {
          Token = new global::Authenticity.Token();
        }
        Token.MergeFrom(other.Token);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            VName = input.ReadString();
            break;
          }
          case 18: {
            if (query_ == null) {
              Query = new global::View.VQuery();
            }
            input.ReadMessage(Query);
            break;
          }
          case 26: {
            if (token_ == null) {
              Token = new global::Authenticity.Token();
            }
            input.ReadMessage(Token);
            break;
          }
        }
      }
    }

  }

  public sealed partial class VResponse : pb::IMessage<VResponse> {
    private static readonly pb::MessageParser<VResponse> _parser = new pb::MessageParser<VResponse>(() => new VResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::View.ViewReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VResponse(VResponse other) : this() {
      vName_ = other.vName_;
      grid_ = other.grid_ != null ? other.grid_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VResponse Clone() {
      return new VResponse(this);
    }

    /// <summary>Field number for the "VName" field.</summary>
    public const int VNameFieldNumber = 1;
    private string vName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VName {
      get { return vName_; }
      set {
        vName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Grid" field.</summary>
    public const int GridFieldNumber = 2;
    private global::View.VGrid grid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::View.VGrid Grid {
      get { return grid_; }
      set {
        grid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VName != other.VName) return false;
      if (!object.Equals(Grid, other.Grid)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VName.Length != 0) hash ^= VName.GetHashCode();
      if (grid_ != null) hash ^= Grid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(VName);
      }
      if (grid_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Grid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VName);
      }
      if (grid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Grid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VResponse other) {
      if (other == null) {
        return;
      }
      if (other.VName.Length != 0) {
        VName = other.VName;
      }
      if (other.grid_ != null) {
        if (grid_ == null) {
          Grid = new global::View.VGrid();
        }
        Grid.MergeFrom(other.Grid);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            VName = input.ReadString();
            break;
          }
          case 18: {
            if (grid_ == null) {
              Grid = new global::View.VGrid();
            }
            input.ReadMessage(Grid);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HColumn : pb::IMessage<HColumn> {
    private static readonly pb::MessageParser<HColumn> _parser = new pb::MessageParser<HColumn>(() => new HColumn());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HColumn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::View.ViewReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HColumn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HColumn(HColumn other) : this() {
      vName_ = other.vName_;
      columnName_ = other.columnName_;
      value_ = other.value_ != null ? other.value_.Clone() : null;
      mainColumn_ = other.mainColumn_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HColumn Clone() {
      return new HColumn(this);
    }

    /// <summary>Field number for the "VName" field.</summary>
    public const int VNameFieldNumber = 1;
    private string vName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VName {
      get { return vName_; }
      set {
        vName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ColumnName" field.</summary>
    public const int ColumnNameFieldNumber = 2;
    private string columnName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ColumnName {
      get { return columnName_; }
      set {
        columnName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 3;
    private global::View.VCell value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::View.VCell Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "MainColumn" field.</summary>
    public const int MainColumnFieldNumber = 4;
    private string mainColumn_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MainColumn {
      get { return mainColumn_; }
      set {
        mainColumn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HColumn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HColumn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VName != other.VName) return false;
      if (ColumnName != other.ColumnName) return false;
      if (!object.Equals(Value, other.Value)) return false;
      if (MainColumn != other.MainColumn) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VName.Length != 0) hash ^= VName.GetHashCode();
      if (ColumnName.Length != 0) hash ^= ColumnName.GetHashCode();
      if (value_ != null) hash ^= Value.GetHashCode();
      if (MainColumn.Length != 0) hash ^= MainColumn.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(VName);
      }
      if (ColumnName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ColumnName);
      }
      if (value_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Value);
      }
      if (MainColumn.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(MainColumn);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VName);
      }
      if (ColumnName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ColumnName);
      }
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      if (MainColumn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MainColumn);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HColumn other) {
      if (other == null) {
        return;
      }
      if (other.VName.Length != 0) {
        VName = other.VName;
      }
      if (other.ColumnName.Length != 0) {
        ColumnName = other.ColumnName;
      }
      if (other.value_ != null) {
        if (value_ == null) {
          Value = new global::View.VCell();
        }
        Value.MergeFrom(other.Value);
      }
      if (other.MainColumn.Length != 0) {
        MainColumn = other.MainColumn;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            VName = input.ReadString();
            break;
          }
          case 18: {
            ColumnName = input.ReadString();
            break;
          }
          case 26: {
            if (value_ == null) {
              Value = new global::View.VCell();
            }
            input.ReadMessage(Value);
            break;
          }
          case 34: {
            MainColumn = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HRequest : pb::IMessage<HRequest> {
    private static readonly pb::MessageParser<HRequest> _parser = new pb::MessageParser<HRequest>(() => new HRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::View.ViewReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HRequest(HRequest other) : this() {
      token_ = other.token_ != null ? other.token_.Clone() : null;
      hColumns_ = other.hColumns_ != null ? other.hColumns_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HRequest Clone() {
      return new HRequest(this);
    }

    /// <summary>Field number for the "Token" field.</summary>
    public const int TokenFieldNumber = 1;
    private global::Authenticity.Token token_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authenticity.Token Token {
      get { return token_; }
      set {
        token_ = value;
      }
    }

    /// <summary>Field number for the "HColumns" field.</summary>
    public const int HColumnsFieldNumber = 2;
    private global::View.HColumn hColumns_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::View.HColumn HColumns {
      get { return hColumns_; }
      set {
        hColumns_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Token, other.Token)) return false;
      if (!object.Equals(HColumns, other.HColumns)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (token_ != null) hash ^= Token.GetHashCode();
      if (hColumns_ != null) hash ^= HColumns.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (token_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Token);
      }
      if (hColumns_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(HColumns);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (token_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Token);
      }
      if (hColumns_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HColumns);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HRequest other) {
      if (other == null) {
        return;
      }
      if (other.token_ != null) {
        if (token_ == null) {
          Token = new global::Authenticity.Token();
        }
        Token.MergeFrom(other.Token);
      }
      if (other.hColumns_ != null) {
        if (hColumns_ == null) {
          HColumns = new global::View.HColumn();
        }
        HColumns.MergeFrom(other.HColumns);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (token_ == null) {
              Token = new global::Authenticity.Token();
            }
            input.ReadMessage(Token);
            break;
          }
          case 18: {
            if (hColumns_ == null) {
              HColumns = new global::View.HColumn();
            }
            input.ReadMessage(HColumns);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Hint : pb::IMessage<Hint> {
    private static readonly pb::MessageParser<Hint> _parser = new pb::MessageParser<Hint>(() => new Hint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Hint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::View.ViewReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hint(Hint other) : this() {
      key_ = other.key_ != null ? other.key_.Clone() : null;
      value_ = other.value_ != null ? other.value_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hint Clone() {
      return new Hint(this);
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 1;
    private global::View.VCell key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::View.VCell Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 2;
    private global::View.VCell value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::View.VCell Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Hint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Hint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Key, other.Key)) return false;
      if (!object.Equals(Value, other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (key_ != null) hash ^= Key.GetHashCode();
      if (value_ != null) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (key_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Key);
      }
      if (value_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (key_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
      }
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Hint other) {
      if (other == null) {
        return;
      }
      if (other.key_ != null) {
        if (key_ == null) {
          Key = new global::View.VCell();
        }
        Key.MergeFrom(other.Key);
      }
      if (other.value_ != null) {
        if (value_ == null) {
          Value = new global::View.VCell();
        }
        Value.MergeFrom(other.Value);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (key_ == null) {
              Key = new global::View.VCell();
            }
            input.ReadMessage(Key);
            break;
          }
          case 18: {
            if (value_ == null) {
              Value = new global::View.VCell();
            }
            input.ReadMessage(Value);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HResponse : pb::IMessage<HResponse> {
    private static readonly pb::MessageParser<HResponse> _parser = new pb::MessageParser<HResponse>(() => new HResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::View.ViewReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HResponse(HResponse other) : this() {
      hints_ = other.hints_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HResponse Clone() {
      return new HResponse(this);
    }

    /// <summary>Field number for the "Hints" field.</summary>
    public const int HintsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::View.Hint> _repeated_hints_codec
        = pb::FieldCodec.ForMessage(10, global::View.Hint.Parser);
    private readonly pbc::RepeatedField<global::View.Hint> hints_ = new pbc::RepeatedField<global::View.Hint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::View.Hint> Hints {
      get { return hints_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!hints_.Equals(other.hints_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= hints_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      hints_.WriteTo(output, _repeated_hints_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += hints_.CalculateSize(_repeated_hints_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HResponse other) {
      if (other == null) {
        return;
      }
      hints_.Add(other.hints_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            hints_.AddEntriesFrom(input, _repeated_hints_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegisteredView : pb::IMessage<RegisteredView> {
    private static readonly pb::MessageParser<RegisteredView> _parser = new pb::MessageParser<RegisteredView>(() => new RegisteredView());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisteredView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::View.ViewReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisteredView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisteredView(RegisteredView other) : this() {
      vName_ = other.vName_;
      displayName_ = other.displayName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisteredView Clone() {
      return new RegisteredView(this);
    }

    /// <summary>Field number for the "VName" field.</summary>
    public const int VNameFieldNumber = 1;
    private string vName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VName {
      get { return vName_; }
      set {
        vName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DisplayName" field.</summary>
    public const int DisplayNameFieldNumber = 2;
    private string displayName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisteredView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisteredView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VName != other.VName) return false;
      if (DisplayName != other.DisplayName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VName.Length != 0) hash ^= VName.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(VName);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DisplayName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VName);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisteredView other) {
      if (other == null) {
        return;
      }
      if (other.VName.Length != 0) {
        VName = other.VName;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            VName = input.ReadString();
            break;
          }
          case 18: {
            DisplayName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RVResponse : pb::IMessage<RVResponse> {
    private static readonly pb::MessageParser<RVResponse> _parser = new pb::MessageParser<RVResponse>(() => new RVResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RVResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::View.ViewReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RVResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RVResponse(RVResponse other) : this() {
      registeredViews_ = other.registeredViews_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RVResponse Clone() {
      return new RVResponse(this);
    }

    /// <summary>Field number for the "RegisteredViews" field.</summary>
    public const int RegisteredViewsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::View.RegisteredView> _repeated_registeredViews_codec
        = pb::FieldCodec.ForMessage(10, global::View.RegisteredView.Parser);
    private readonly pbc::RepeatedField<global::View.RegisteredView> registeredViews_ = new pbc::RepeatedField<global::View.RegisteredView>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::View.RegisteredView> RegisteredViews {
      get { return registeredViews_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RVResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RVResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!registeredViews_.Equals(other.registeredViews_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= registeredViews_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      registeredViews_.WriteTo(output, _repeated_registeredViews_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += registeredViews_.CalculateSize(_repeated_registeredViews_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RVResponse other) {
      if (other == null) {
        return;
      }
      registeredViews_.Add(other.registeredViews_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            registeredViews_.AddEntriesFrom(input, _repeated_registeredViews_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DateTime : pb::IMessage<DateTime> {
    private static readonly pb::MessageParser<DateTime> _parser = new pb::MessageParser<DateTime>(() => new DateTime());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DateTime> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::View.ViewReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DateTime() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DateTime(DateTime other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DateTime Clone() {
      return new DateTime(this);
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 1;
    private long value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DateTime);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DateTime other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0L) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DateTime other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0L) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Value = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
